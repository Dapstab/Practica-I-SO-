#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include "vueloStruct.h"

//#define TABLE_SIZE 5904703
//#define TABLE_SIZE 50

typedef struct {
    int idOrigen;
    int idDestino;
    int hora;
    float tiempoMedioVuelo;
    int hash;
    struct vuelo *next;
    
} vuelo;
int  TABLE_SIZE;
vuelo **hash_table;


//vuelo *hash_table[TABLE_SIZE]; // Es mejor que sea un puntero porque:

// 1) No necesito todo el espacio de toda la tabla sino solamente hasta que llene la tabla, solamente necesito el espacio de algunas direcciones.
// 2) Es mas facil decir cuando un espacio esta vacio ya que un puntero puedo "setearlo" a NULL.

int contarVuelos(char *nombreArch) {
	FILE *arch = fopen(nombreArch, "r");
	if (arch == NULL) {
 		printf("Problema al abrir el archivo %s. Termina el programa.\n", nombreArch);
 		exit(-1);
 	}	
 	int n = 0; // Cantidad de vuelos.
 	char c = fgetc(arch); // Recorremos caracter por caracter 
 	while (!feof(arch)) {
 		if (c == '\n') n++;
 		c = fgetc(arch);
 	}
 	fclose(arch);
 	return n - 1; // Porque en la primera linea estan el nombre de los campos. (labels)
}

int getNumberLine(char *linea) {
	int idOrigen;
	int i = 0, j = 0;
	char nro[100];
	//printf("%s\n", linea);
	while (linea[i] != ',') {
		//printf("%c\n",linea[i]);
		nro[j++] = linea[i++]; // Copiamos el idOrigen como cadena
	}
	nro[i] = '\0'; // Caracter de terminación de la cadena
	//printf("%s\n", nro);
    	idOrigen = atoi(nro); // Conversión del nro a cadena
    	//printf("%i\n", idOrigen);
    	return idOrigen;
}

void printValues(vuelo values[]) {
	for (int i = 0; i < TABLE_SIZE; i++) {
		printf("ID origen: %i, ID destino: %i, Hora: %i, Tiempo medio: %.2f, Hash: %i\n", values[i].idOrigen, values[i].idDestino, values[i].hora, values[i].tiempoMedioVuelo, values[i].hash);
	}
}

unsigned int hash(int x) {
	int c2=0x27d4eb2d; // a prime or an odd constant
	x = (x ^ 61) ^ (x >> 16);
	x = x + (x << 3);
	x = x ^ (x >> 4);
	x = x * c2;
	x = x ^ (x >> 15);
	 
    	//printf("%i\n", x % 50);
    	return x % TABLE_SIZE;
}

void init_hash_table() {
	for (int i = 0; i < TABLE_SIZE; i++) {
		hash_table[i] = NULL;
	}
	
	// table is empty
}

void print_table() {
	printf("Start\n");
	for (int i = 0; i < TABLE_SIZE; i++) {
		if (hash_table[i] == NULL) {
			printf("\t%i\t---\n", i);
		} else {
			printf("\t%i\t ", i);
			vuelo *tmp = hash_table[i];
			while (tmp != NULL) {
				printf("%i - ", tmp->idOrigen);
				tmp = tmp->next;
			}
			printf("\n");
		}
	}
	printf("End\n");
}

void print_struct (vuelo *p) {
	fputs("Datos del vuelo\n", stdout);
	printf("Id del vuelo: %i\n", p->idOrigen);
	printf("Id de destino del vuelo: %i\n", p->idDestino);
	printf("Hora del vuelo: %i\n", p->hora);
	printf("Tiempo medio de vuelo: %.2f\n", p->tiempoMedioVuelo);
}



bool hash_table_insert(vuelo *p) {
	if (p == NULL) return false;
	int index = hash(p->idOrigen);
	p->next = hash_table[index];
	hash_table[index] = p;
	return true; 
}

vuelo *hash_table_lookup(int idOrigen) {
	int index = hash(idOrigen);
	vuelo * tmp = hash_table[index];
	while (tmp !=  NULL && idOrigen != tmp->idOrigen) {
		tmp = tmp->next;
		
	}  
	
	return tmp;
}

vuelo *hash_table_delete(int idOrigen) {
	int index = hash(idOrigen);
	vuelo * tmp = hash_table[index];
	vuelo *prev = NULL;
	while (tmp !=  NULL && idOrigen != tmp->idOrigen) {
		prev = tmp;
		tmp = tmp->next;
	}  
	if (tmp == NULL) return NULL;
	if (prev == NULL) {
		// deleting the head
		hash_table[index] = tmp->next;
	} else {
		prev->next = tmp->next;
	}
	return tmp;
}


int main() {	
	 char nombreArchivoEnt[] = "practicaExample";
	 char nombreArchivoSal[] = "practica1Sal";
     TABLE_SIZE= contarVuelos(nombreArchivoEnt);
     hash_table = (vuelo **) malloc(TABLE_SIZE*sizeof(vuelo *));
     
	init_hash_table();
	//print_table();
 	
 
 	FILE *arch = fopen(nombreArchivoEnt, "r");
 	if (arch == NULL) {
 		printf("Problema al abrir el archivo %s. Termina el programa.\n", nombreArchivoEnt);
 		exit(-1);
 	}
 	
 	FILE *archSal = fopen(nombreArchivoSal, "w");
 	if (archSal == NULL) {
 		printf("Problema al crear el archivo %s. Termina el programa.\n", nombreArchivoSal);
 		exit(-1);
 	}
 	
 	 	
 	// Primero llegamos a la segunda linea

 	char linea[1000];
 	
	printf("%s",linea);
	vuelo vuelos[TABLE_SIZE]; // array to structs to store values
	
 	fgets(linea, sizeof(linea), arch); // Titulos de campos
 	
 	// Recordemos que el fgets tambien alamacena el salto de linea!!
 	linea[strlen(linea)-1] = '\0'; // Colocamos el terminador de cadena en vez del salto de linea, la razón de esto es porque vamos a 	agregar una nueva "columna" luego no queremos que se lea ese salto de linea.
 	
 	// Agregamos el "Hash" label y guardamos en la salida
 	fprintf(archSal, "hash,%s\n", linea); // Como si estuvieramos haciendo un append
 	
 	unsigned int hashNum;
 	int i, idOrigen;
 	for (i=0; i<TABLE_SIZE; i++) {
 		fgets(linea, 1000, arch); // Leemos la linea correspondiente a un vuelo
 		linea[strlen(linea)-1] = '\0';
 		idOrigen = getNumberLine(linea);
 		hashNum = hash(idOrigen);
 		fprintf(archSal, "%i,%s\n", hashNum,linea);
 			
 		}
 	
 	
 	fclose(arch);
 	fclose(archSal);
 	
 	archSal = fopen(nombreArchivoSal, "r");
 	if (archSal == NULL) {
 		printf("Problema al crear el archivo %s. Termina el programa.\n", nombreArchivoSal);
 		exit(-1);
 	} 	
 	
 	int row_count = 0;
	int field_count = 0;
 	
 	int j = 0;
 	
	while (fgets(linea, sizeof(linea), archSal)) {
		//printf("%s\n", linea); // this will parse all the data (LO TUVE QUE CORRER)
		field_count = 0;
		row_count++;
		if (row_count == 1) {
			continue; // we did not want to take the labels
		}
		
		char *field = strtok(linea, ","); // separate linea with commas
		int fieldCount = 0;
		while (field) {
			//printf("FIELD = %s\n", field);
			if (field_count == 0) {
				vuelos[j].hash = atoll(field);
			}	
				
			if (field_count == 2)
				vuelos[j].idDestino = atoll(field);
				
			if (field_count == 3)
				vuelos[j].hora = atoll(field);
				
			if (field_count == 4)
				vuelos[j].tiempoMedioVuelo = atof(field);
				
			if (field_count == 1)
				vuelos[j].idOrigen = atoll(field);

			field = strtok(NULL, ","); // ¿Para salir del while? Update field value
			field_count++;
		}
		hash_table_insert(&vuelos[j]);
		vuelo *tmp = hash_table_lookup(vuelos[j].idOrigen);
		if(tmp !=NULL)
		    printf("%i",j);
		    tmp= NULL;
		j++;
	}
	
	archSal = fopen(nombreArchivoSal, "w");
 	if (archSal == NULL) {
 		printf("Problema al crear el archivo %s. Termina el programa.\n", nombreArchivoSal);
 		exit(-1);
 	}
	
 	for (int i=0; i<TABLE_SIZE; i++) { 
 		vuelo *tmp = hash_table[i];
 		while (tmp !=NULL)
 		{
 			fprintf(archSal,"%d,%d,%d,%.2f;",tmp->idOrigen,tmp->idDestino,tmp->hora,tmp->tiempoMedioVuelo);
 			tmp=tmp->next;
 			}
 		fprintf(archSal,"\n");	
 			
 	}		
 	
 	fclose(archSal);

	
	print_table();
	//printValues(vuelos);	
	}
 	